#+STARTUP: showall
#+STARTUP: hidestars
#+STARTUP: lognotestate
#+SEQ_TODO: TODO(t) STARTED(s) WAITING(w) | DONE(d) DELEGATED(g) CANCELED(c) NOTE

* Notes and plans:
** Open project
***  open all files in a project, including project supporting buffers
***  open just project supporting buffers, including:
**** magit status buffer
**** dired at top level dir
**** supporting org-mode file, if defined
**** open shell buffer (ansi-term or eshell) at top-level dir
**** websites to open via browse-url
***  run any project initialization commands, i.e.:
**** open rope project at appropriate dir (top-level?)
**** start SLIME

** Close project
***  Close all associated files and buffers

** Open file in project
***  Methods:
**** ido
**** dired or dired-like
**** speedbar
***  Use defined list of files in project
***  Use all files in project directories
***  Use all files in project directories sans those ignored by git (see git-dired.el)

** Open project among known projects (like magit-status-repos)

** Switch to open project buffer (ido)

** Jump to or open project buffer:
***  magit status
***  dired (top-level, parent, current)
***  org-mode file
***  shell buffer
***  speedbar or dired for all project files

** Add a keyboard sub-map for the buffers in the project that adds:
***  open file in project
***  close project
***  jump to or open project buffer
***  switch to open project buffer

** Refresh project
***  if new files are added to project

** Add file to project
***  current buffer's file
***  prompt for file
***  currently marked file(s) in dired

** Remove file from project
***  current file
***  prompt for file (ido)

** Create empty project

** Grep through files of the project

** Etags

** ibuffer limited to just project files

** compile project

** agenda just for project files

** questions:
*** I seem to be limiting the idea of a project of those files under a common sub-directory.  
    This might be fine for now, but that doesn't seem to be a reasonable
    limitation.  I should examine where this assumption is made and see
    how to remove it.  i.e., metaproject-get-top-dir

*** It is probably a reasonable assumption that a given file can only
    belong to one open project at a time.  If I want to allow for this,
    how to work around it?
  
* Todo's
** action registry
***  each key in the .metaproject plist is associated with a given
     action
***  these actions are provided by calling a registry function, often
     within an individual emacs module.  this allows for optional
     functionality to be provided and have a minimal stable core
***  at open time, the action registry is looped through, in order
     (should order matter?), and a check is made to see if a
     corresponding value is found in the plist.  if so, the registered
     action function is called with the value in the plist as its
     argument.
***  do I need registration for other events?  probably at least open
     and close.
***  only the basic ones that include default features from emacs
     proper will be included in the core metaproject module.  right
     now, this is simple file opening and closing and perhaps dired.
***  others include: magit, rope, slime, org-mode, shell buffer, etags

** code clean-up
*** TODO convert the var to a defcustom
*** TODO add docstrings to all "top-level" functions, at minimum
*** DONE convert TODOs and the like from README.markdown to an org-mode file
    CLOSED: [2009-04-29 Wed 16:48]
*** TODO Add descriptions to the top of the .el files
*** TODO Add usage instructions
*** TODO run checkdoc and fix any errors it reports  
